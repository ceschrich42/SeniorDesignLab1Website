#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('samplenodejs:server');
var http = require('http');
var plotly = require('plotly')('ConnorEschrich','CkbHi6nsedBWcOLRKGan');
var stream_token = 'rvu6ddxuc1';
var admin = require("firebase-admin");
const accountSid = 'AC073117779aecf1cad4a9fdb09c2d34f4';
const authToken = 'af31a15c3056e93b4598558211b0d574';
var twilio = require('twilio');
const client = new twilio(accountSid, authToken);
var serviceAccount = require("C:\\Users\\jjb09\\git\\jjbiggins\\SeniorDesign\\Lab1\\Website\\SampleNodeJS\\serviceAccountKey.json");


admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    databaseURL: "https://seniordesignlab1-e09d1.firebaseio.com"
});

var database = admin.database();


/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

client.messages
    .create({
        body: 'This is the ship that made the Kessel Run in fourteen parsecs?',
        from: '+16306264552',
        to: '+18475295964'
    })
    .then(message => console.log(message.sid)).done();

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = new require('socket.io')(server);

io.on('connection', function(socket) {
    console.log('a user connected');

    socket.on('disconnect', function() {
        console.log('user disconnected');
    });
});

var initData = [{x:[], y:[], type:'scatter', mode:'lines+markers', marker: {
    color: "rgba(31, 119, 180, 0.96)"}, line: {
    color:"rgba(31, 119, 180, 0.31)"}, stream:{token:stream_token, maxpoints:300}}];
var initGraphOptions = {fileopt : "overwrite", filename : "nodenodenode", layout: { title: "RealTimeGraph", xaxis: {
    title: "Seconds From Current Time",
    titlefont: {
        family: "Verdana, Sans-serif",
        size: 18,
        color: "#7f7f7f"
    },
    autorange: "reversed"

},
    yaxis: {
        title: "Temperatures",
        titlefont: {
            family: "Verdana, Sans-serif",
            size: 18,
            color: "#7f7f7f"
        }
    }}};

plotly.plot(initData, initGraphOptions, function (err, msg) {
    if (err) return console.log(err)
    console.log(msg);

    var stream1 = plotly.stream(stream_token, function (err, res) {
        console.log(err, res);
        //clearInterval(loop); // once stream is closed, stop writing
    });
    /*
        var i = 0;
        var loop = setInterval(function () {
            var streamObject = JSON.stringify({ x : 1000-i, y : i });
            stream1.write(streamObject+'\n');
            i++;
        }, 1000);
        */
    var i = 300;
    database.ref('temperatures').on("value", function(snapshot) {
        snapshot.forEach(function(data) {
            console.log("The " + data.key + " temperature is " + data.val());
            var streamObject = JSON.stringify({ x : i, y : data.val()});
            stream1.write(streamObject+'\n');
            i--;
        });
    });

});

var five = require('johnny-five');
var board = new five.Board();

board.on('ready', function() {

    var thermometer = new five.Thermometer ({
        controller: "DS18B20",
        pin: 5,
        freq: 50
    });

    thermometer.on("data", function() {
        console.log(this.celsius + " C");
        database.ref("temperatures").push(this.celsius);
    });
});





/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
